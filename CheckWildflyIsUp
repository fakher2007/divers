import java.io.IOException;
import java.net.Socket;

public class WildFlyServerChecker {

    public static void main(String[] args) {
        String wildflyHost = "localhost";
        int wildflyPort = 8080; // Adjust this port to the appropriate WildFly port
        
        if (isWildFlyServerUp(wildflyHost, wildflyPort)) {
            System.out.println("WildFly server is up.");
        } else {
            System.out.println("WildFly server is down or unreachable.");
        }
    }

    public static boolean isWildFlyServerUp(String host, int port) {
        try (Socket ignored = new Socket(host, port)) {
            return true;
        } catch (IOException e) {
            return false;
        }
    }
}
---------------
unit test
---------------
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.mockito.Mockito.*;

import java.io.IOException;
import java.net.Socket;

import org.junit.jupiter.api.Test;

public class ServerCheckerTest {

    @Test
    void testIsWildflyServerUp() throws IOException {
        // Mocking
        Socket mockSocket = mock(Socket.class);
        whenNew(Socket.class).withArguments("example.com", 8080).thenReturn(mockSocket);

        // Test when socket creation is successful
        assertTrue(new ServerChecker().isWildflyServerUp("example.com", 8080));

        // Test when IOException occurs
        whenNew(Socket.class).withArguments("example.com", 8081).thenThrow(new IOException());
        assertFalse(new ServerChecker().isWildflyServerUp("example.com", 8081));
    }
}

