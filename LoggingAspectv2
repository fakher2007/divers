import org.aspectj.lang.ProceedingJoinPoint;
import org.aspectj.lang.annotation.Around;
import org.aspectj.lang.annotation.Aspect;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.core.annotation.Order;
import org.springframework.stereotype.Component;

import java.util.Arrays;
import java.util.stream.Collectors;

@Aspect
@Component
@Order(1)  // Set order to ensure this aspect runs before others
public class LoggingAspect {

    private Logger logger = LoggerFactory.getLogger(LoggingAspect.class);

    @Around("@within(logExecution) || @annotation(logExecution)")
    public Object logMethodExecution(ProceedingJoinPoint joinPoint, LogExecution logExecution) throws Throwable {
        String methodName = joinPoint.getSignature().getName();
        logger.info("Executing method: {}", methodName);

        Object[] methodArgs = joinPoint.getArgs();
        logger.info("Method arguments: {}", getArgumentsAsString(methodArgs));

        long startTime = System.currentTimeMillis();
        Object result = joinPoint.proceed();
        long endTime = System.currentTimeMillis();

        logger.info("Method {} executed in {} ms", methodName, endTime - startTime);
        logger.info("Method return value: {}", result);

        return result;
    }

    private String getArgumentsAsString(Object[] arguments) {
        return Arrays.stream(arguments)
            .map(String::valueOf)
            .collect(Collectors.joining(", "));
    }
}

‚Äê-------------
import java.lang.annotation.ElementType;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;

@Retention(RetentionPolicy.RUNTIME)
@Target({ElementType.TYPE, ElementType.METHOD})
public @interface LogExecution {
}

--------------
import org.springframework.stereotype.Service;

@LogExecution
@Service
public class MyService {

    public void myMethod(String argument) {
        // Method implementation
    }
}




