private void updateData(List<PeopleReferential> peopleReferentialsList) {
    if (!peopleReferentialsList.isEmpty()) {
        log.info("Cleaning people_referential table");
        peopleReferentialRepository.deleteAll();
        log.info("Updating people_referential table");

        int batchSize = 1000;
        int listSize = peopleReferentialsList.size();

        IntStream.range(0, listSize)
                .boxed()
                .collect(Collectors.groupingBy(index -> index / batchSize))
                .values()
                .forEach(indices -> {
                    List<PeopleReferential> sublist = indices.stream()
                            .map(peopleReferentialsList::get)
                            .collect(Collectors.toList());
                    peopleReferentialRepository.saveAll(sublist);
                });
    }
}
‐--------------

private void updateData(List<PeopleReferential> peopleReferentialsList) {
    if (!peopleReferentialsList.isEmpty()) {
        log.info("Cleaning people_referential table");
        peopleReferentialRepository.deleteAll();
        log.info("Updating people_referential table");

        int batchSize = 1000;
        int listSize = peopleReferentialsList.size();

        IntStream.range(0, (listSize + batchSize - 1) / batchSize)
                .mapToObj(i -> peopleReferentialsList.subList(i * batchSize, Math.min((i + 1) * batchSize, listSize)))
                .forEach(peopleReferentialRepository::saveAll);
    }
}
‐--------------
import java.util.List;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

private void updateData(List<PeopleReferential> peopleReferentialsList) {
    if (!peopleReferentialsList.isEmpty()) {
        log.info("Cleaning people_referential table");
        peopleReferentialRepository.deleteAll();
        log.info("Updating people_referential table");

        int batchSize = 1000;
        int listSize = peopleReferentialsList.size();
        int numThreads = Runtime.getRuntime().availableProcessors(); // Number of available processors

        ExecutorService executor = Executors.newFixedThreadPool(numThreads);

        for (int i = 0; i < listSize; i += batchSize) {
            int endIndex = Math.min(i + batchSize, listSize);
            List<PeopleReferential> sublist = peopleReferentialsList.subList(i, endIndex);

            executor.execute(() -> peopleReferentialRepository.saveAll(sublist));
        }

        executor.shutdown();
    }
}

