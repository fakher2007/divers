import org.aspectj.lang.ProceedingJoinPoint;
import org.aspectj.lang.annotation.Around;
import org.aspectj.lang.annotation.Aspect;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Component;

import java.util.Arrays;
import java.util.stream.Collectors;

@Aspect
@Component
public class LoggingAspect {

    private Logger logger = LoggerFactory.getLogger(LoggingAspect.class);

    @Around("execution(* com.example.myapp.service.*.*(..))")
    public Object logMethodExecution(ProceedingJoinPoint joinPoint) throws Throwable {
        String methodName = joinPoint.getSignature().getName();
        logger.info("Executing method: {}", methodName);

        Object[] methodArgs = joinPoint.getArgs();
        logger.info("Method arguments: {}", getArgumentsAsString(methodArgs));

        long startTime = System.currentTimeMillis();
        Object result = joinPoint.proceed();
        long endTime = System.currentTimeMillis();

        logger.info("Method {} executed in {} ms", methodName, endTime - startTime);
        logger.info("Method return value: {}", result);

        return result;
    }

    private String getArgumentsAsString(Object[] arguments) {
        return Arrays.stream(arguments)
            .map(String::valueOf)
            .collect(Collectors.joining(", "));
    }
}
