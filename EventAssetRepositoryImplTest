import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.jdbc.core.JdbcTemplate;

import java.util.Arrays;
import java.util.List;
import java.util.Map;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.*;

class EventAssetRepositoryImplTest {

    @Mock
    private JdbcTemplate jdbcTemplate;

    @InjectMocks
    private EventAssetRepositoryImpl eventAssetRepository;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
        eventAssetRepository = new EventAssetRepositoryImpl(jdbcTemplate);
    }

    @Test
    void testGetEventAssets() {
        String eventId = "123";
        String expectedQuery = "SELECT id FROM security_event_asset WHERE security_event_id = ?";
        List<Integer> expectedAssets = Arrays.asList(1, 2, 3);

        when(jdbcTemplate.queryForList(eq(expectedQuery), eq(Integer.class), eq(eventId)))
                .thenReturn(expectedAssets);

        List<Integer> actualAssets = eventAssetRepository.getEventAssets(eventId);

        assertEquals(expectedAssets, actualAssets);
        verify(jdbcTemplate, times(1))
                .queryForList(eq(expectedQuery), eq(Integer.class), eq(eventId));
    }

    @Test
    void testGetAssetsDetails() {
        List<Integer> assetIds = Arrays.asList(1, 2, 3);
        String assetType = "APPLICATION";
        String expectedTable = "security_event_people_asset";
        String expectedQuery = "SELECT * FROM security_event_people_asset WHERE id IN (?, ?, ?)";

        List<Map<String, Object>> expectedAssets = Arrays.asList(
                Map.of("id", 1, "name", "Asset 1"),
                Map.of("id", 2, "name", "Asset 2"),
                Map.of("id", 3, "name", "Asset 3")
        );

        when(jdbcTemplate.queryForList(eq(expectedQuery), eq(assetIds.toArray())))
                .thenReturn(expectedAssets);

        List<Map<String, Object>> actualAssets = eventAssetRepository.getAssetsDetails(assetIds, assetType);

        assertEquals(expectedAssets.size(), actualAssets.size());
        assertEquals(assetType, actualAssets.get(0).get("asset_type"));
        assertEquals(expectedAssets.get(0).get("name"), actualAssets.get(0).get("name"));
        // ... assert other properties of the assets

        verify(jdbcTemplate, times(1))
                .queryForList(eq(expectedQuery), eq(assetIds.toArray()));
    }
}
