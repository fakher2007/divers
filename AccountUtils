import fr.copartis.api.model.ApiStatusCodes;
import fr.copartis.api.model.ApiStatusException;
import fr.copartis.api.model.upsideo.Attachment;
import lombok.AccessLevel;
import lombok.NoArgsConstructor;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;

import java.util.List;

@Component
@NoArgsConstructor(access = AccessLevel.PRIVATE)
public class AccountUtils {

    @Value("${upload.file.max.size:5}")
    private int uploadFileMaxSize; // in MB

    @Value("${upload.file.max.number:4}")
    private int uploadFileMaxNumber;

    private static final int BYTES_IN_MB = 1024 * 1024;

    public void checkFileSize(List<Attachment> attachments) throws ApiStatusException {
        checkFileCount(attachments);
        checkTotalFileSize(attachments);
    }

    private void checkFileCount(List<Attachment> attachments) throws ApiStatusException {
        if (attachments == null || attachments.isEmpty()) {
            throw new ApiStatusException(ApiStatusCodes.PJ_NOT_ADDED);
        }

        if (attachments.size() > uploadFileMaxNumber) {
            throw new ApiStatusException(ApiStatusCodes.PJ_NOT_ADDED);
        }
    }

    private void checkTotalFileSize(List<Attachment> attachments) throws ApiStatusException {
        double totalSizeInBytes = attachments.stream()
                                             .mapToDouble(attachment -> attachment.getBase64datas().length)
                                             .sum();

        double sizeInMb = totalSizeInBytes / BYTES_IN_MB;

        if (sizeInMb >= uploadFileMaxSize) {
            throw new ApiStatusException(ApiStatusCodes.MAX_FILE_SIZE);
        }
    }
}

-----------
unit tests
-----------
import fr.copartis.api.model.ApiStatusCodes;
import fr.copartis.api.model.ApiStatusException;
import fr.copartis.api.model.upsideo.Attachment;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.beans.factory.annotation.Value;

import java.util.Arrays;
import java.util.Collections;
import java.util.List;

import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
public class AccountUtilsTest {

    @InjectMocks
    private AccountUtils accountUtils;

    @Mock
    private Attachment attachment;

    @Value("${upload.file.max.size:5}")
    private int uploadFileMaxSize;

    @Value("${upload.file.max.number:4}")
    private int uploadFileMaxNumber;

    @BeforeEach
    public void setUp() {
        // Mock the environment variables
        when(attachment.getBase64datas()).thenReturn("base64data".getBytes());
    }

    @Test
    public void testCheckFileCount_NullAttachments() {
        assertThrows(ApiStatusException.class, () -> accountUtils.checkFileCount(null));
    }

    @Test
    public void testCheckFileCount_EmptyAttachments() {
        assertThrows(ApiStatusException.class, () -> accountUtils.checkFileCount(Collections.emptyList()));
    }

    @Test
    public void testCheckFileCount_ExceedMaxNumber() {
        List<Attachment> attachments = Arrays.asList(new Attachment(), new Attachment(), new Attachment(), new Attachment(), new Attachment());
        assertThrows(ApiStatusException.class, () -> accountUtils.checkFileCount(attachments));
    }

    @Test
    public void testCheckTotalFileSize_ExceedMaxSize() {
        List<Attachment> attachments = Arrays.asList(
                new Attachment("base64data1".getBytes()),
                new Attachment("base64data2".getBytes()),
                new Attachment("base64data3".getBytes()),
                new Attachment("base64data4".getBytes()),
                new Attachment("base64data5".getBytes())
        );
        assertThrows(ApiStatusException.class, () -> accountUtils.checkTotalFileSize(attachments));
    }

    @Test
    public void testCheckTotalFileSize_WithinMaxSize() {
        List<Attachment> attachments = Arrays.asList(
                new Attachment("base64data1".getBytes()),
                new Attachment("base64data2".getBytes())
        );
        // This should not throw an exception
        accountUtils.checkTotalFileSize(attachments);
    }
}
-------
version 2
--------
import fr.copartis.api.model.ApiStatusCodes;
import fr.copartis.api.model.ApiStatusException;
import fr.copartis.api.model.upsideo.Attachment;
import lombok.AccessLevel;
import lombok.NoArgsConstructor;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;

import java.util.List;
import java.util.Optional;

@Component
@NoArgsConstructor(access = AccessLevel.PRIVATE)
public class AccountUtils {

    private static final Logger LOGGER = LoggerFactory.getLogger(AccountUtils.class);

    @Value("${upload.file.max.size:5}")
    private int uploadFileMaxSize; // in MB

    @Value("${upload.file.max.number:4}")
    private int uploadFileMaxNumber;

    private static final int BYTES_IN_MB = 1024 * 1024;

    public void checkFileSize(List<Attachment> attachments) throws ApiStatusException {
        checkFileCount(attachments);
        checkTotalFileSize(attachments);
    }

    private void checkFileCount(List<Attachment> attachments) throws ApiStatusException {
        Optional.ofNullable(attachments)
                .filter(list -> !list.isEmpty())
                .orElseThrow(() -> {
                    LOGGER.error("Attachments list is null or empty");
                    return new ApiStatusException(ApiStatusCodes.PJ_NOT_ADDED);
                });

        if (attachments.size() > uploadFileMaxNumber) {
            LOGGER.error("Number of attachments exceeds the maximum allowed: {}", uploadFileMaxNumber);
            throw new ApiStatusException(ApiStatusCodes.PJ_NOT_ADDED);
        }
    }

    private void checkTotalFileSize(List<Attachment> attachments) throws ApiStatusException {
        double totalSizeInBytes = attachments.stream()
                                             .mapToDouble(attachment -> attachment.getBase64datas().length)
                                             .sum();

        double sizeInMb = totalSizeInBytes / BYTES_IN_MB;

        if (sizeInMb >= uploadFileMaxSize) {
            LOGGER.error("Total file size exceeds the maximum allowed: {} MB", uploadFileMaxSize);
            throw new ApiStatusException(ApiStatusCodes.MAX_FILE_SIZE);
        }
    }
}
-----
unit tests v2
‐-------
import fr.copartis.api.model.ApiStatusCodes;
import fr.copartis.api.model.ApiStatusException;
import fr.copartis.api.model.upsideo.Attachment;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.beans.factory.annotation.Value;

import java.util.Arrays;
import java.util.Collections;
import java.util.List;

import static org.assertj.core.api.Assertions.assertThatThrownBy;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
public class AccountUtilsTest {

    @InjectMocks
    private AccountUtils accountUtils;

    @Mock
    private Attachment attachment;

    @Value("${upload.file.max.size:5}")
    private int uploadFileMaxSize;

    @Value("${upload.file.max.number:4}")
    private int uploadFileMaxNumber;

    @BeforeEach
    public void setUp() {
        // Mock the environment variables
        when(attachment.getBase64datas()).thenReturn("base64data".getBytes());
    }

    @Test
    public void testCheckFileCount_NullAttachments() {
        assertThatThrownBy(() -> accountUtils.checkFileCount(null))
                .isInstanceOf(ApiStatusException.class)
                .hasFieldOrPropertyWithValue("code", ApiStatusCodes.PJ_NOT_ADDED);
    }

    @Test
    public void testCheckFileCount_EmptyAttachments() {
        assertThatThrownBy(() -> accountUtils.checkFileCount(Collections.emptyList()))
                .isInstanceOf(ApiStatusException.class)
                .hasFieldOrPropertyWithValue("code", ApiStatusCodes.PJ_NOT_ADDED);
    }

    @Test
    public void testCheckFileCount_ExceedMaxNumber() {
        List<Attachment> attachments = Arrays.asList(new Attachment(), new Attachment(), new Attachment(), new Attachment(), new Attachment());
        assertThatThrownBy(() -> accountUtils.checkFileCount(attachments))
                .isInstanceOf(ApiStatusException.class)
                .hasFieldOrPropertyWithValue("code", ApiStatusCodes.PJ_NOT_ADDED);
    }

    @Test
    public void testCheckTotalFileSize_ExceedMaxSize() {
        List<Attachment> attachments = Arrays.asList(
                new Attachment("base64data1".getBytes()),
                new Attachment("base64data2".getBytes()),
                new Attachment("base64data3".getBytes()),
                new Attachment("base64data4".getBytes()),
                new Attachment("base64data5".getBytes())
        );
        assertThatThrownBy(() -> accountUtils.checkTotalFileSize(attachments))
                .isInstanceOf(ApiStatusException.class)
                .hasFieldOrPropertyWithValue("code", ApiStatusCodes.MAX_FILE_SIZE);
    }

    @Test
    public void testCheckTotalFileSize_WithinMaxSize() {
        List<Attachment> attachments = Arrays.asList(
                new Attachment("base64data1".getBytes()),
                new Attachment("base64data2".getBytes())
        );
        // This should not throw an exception
        accountUtils.checkTotalFileSize(attachments);
    }
}

