import os
import subprocess
import argparse
import shutil

def download_repo(repo):
    repo_url, branch_name = repo
    subprocess.run(['git', 'clone', '-b', branch_name, repo_url])

def build_artifact(repo_name):
    os.chdir(repo_name)
    subprocess.run(['./mvnw', 'clean', 'package'])
    os.chdir('..')

def run_application(repo, env_variables):
    repo_name, branch_name = repo
    os.chdir(repo_name)
    subprocess.run(['./mvnw', 'clean', 'package'])

    cmd = ['java', '-jar', 'target/myapp.jar']
    for env_var, value in env_variables.items():
        cmd.append('-D{}={}'.format(env_var, value))

    subprocess.Popen(['cmder', '/START', 'cmd', '/K'] + cmd)

    os.chdir('..')

def clean_repos():
    repos = [dI for dI in os.listdir('.') if os.path.isdir(dI)]
    for repo in repos:
        try:
            shutil.rmtree(repo)
            print(f'Repo "{repo}" is removed.')
        except OSError as e:
            print(f'Error removing repo "{repo}": {e}')

def build_frontend():
    os.chdir('frontend')  # Change to the frontend directory
    subprocess.run(['npm', 'install'])  # Install dependencies
    subprocess.run(['npm', 'run', 'build'])  # Build the frontend
    os.chdir('..')  # Go back to the original directory

def run_frontend():
    os.chdir('frontend')  # Change to the frontend directory
    subprocess.run(['npm', 'start'])  # Run the frontend
    os.chdir('..')  # Go back to the original directory

def main():
    parser = argparse.ArgumentParser(description='Spring Boot JAR and React Frontend CLI')

    parser.add_argument('actions', nargs='*', choices=['download', 'buildfront', 'runfront', 'buildback', 'runback', 'clean'], default=['download', 'buildfront', 'runfront', 'buildback', 'runback', 'clean'], help='Actions to perform: download, buildfront, runfront, buildback, runback, clean')
    parser.add_argument('--action', help='Specify the action to perform (download, buildfront, runfront, buildback, runback, clean)')
    args = parser.parse_args()

    
    repos = [
        ('https://github.com/username/repo1.git', 'main'),
        ('https://github.com/username/repo2.git', 'development'),
        ('https://github.com/username/repo3.git', 'master'),
        ('https://github.com/username/repo4.git', 'feature/branch'),
        ('https://github.com/username/frontend.git', 'main')  # Add frontend repository here
    ]

    env_variables_list = [
        {
            'ENV_VAR1': 'value1',
            'ENV_VAR2': 'value2'
        },
        {
            'ENV_VAR3': 'value3',
            'ENV_VAR4': 'value4'
        },
        {
            'ENV_VAR5': 'value5',
            'ENV_VAR6': 'value6'
        },
        {
            'ENV_VAR7': 'value7',
            'ENV_VAR8': 'value8'
        },
        {}  # Empty dictionary for frontend
    ]

    action_descriptions = {
        'download': 'Download repositories',
        'buildfront': 'Build the React frontend',
        'runfront': 'Run the React frontend',
        'buildback': 'Build the Spring Boot backend',
        'runback': 'Run the Spring Boot backend',
        'clean': 'Clean repositories'
    }

    if args.action:
        if args.action in action_descriptions:
            print(action_descriptions[args.action])
        else:
            print('Invalid action')

    if 'download' in args.actions:
        for repo in repos:
            download_repo(repo)

    if 'buildfront' in args.actions:
        build_frontend()  # Build the frontend

    if 'runfront' in args.actions:
        run_frontend()  # Run the frontend

    if 'buildback' in args.actions:
        for repo in repos:
            if repo[0].endswith('frontend.git'):
                continue  # Skip frontend repo
            build_artifact(repo[0].split('/')[-1].split('.')[0])

    if 'runback' in args.actions:
        for repo, env_variables in zip(repos, env_variables_list):
            if repo[0].endswith('frontend.git'):
                continue  # Skip frontend repo
            run_application(repo, env_variables)

    if 'clean' in args.actions:
        clean_repos()

if __name__ == '__main__':
    main()

☆☆☆☆☆☆☆☆☆☆☆
how to use it?
☆☆☆☆☆☆☆☆☆☆☆
With this update, when you run the script with the -h flag,
you will see more detailed descriptions of each action:

python mycli.py --action buildfront
# Output: Build the React frontend

python mycli.py --action runback
# Output: Run the Spring Boot backend





