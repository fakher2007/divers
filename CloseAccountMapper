⁹import org.mapstruct.Mapper;
import org.mapstruct.Mapping;
import org.mapstruct.factory.Mappers;

@Mapper(componentModel = "spring") // Use "default" if not integrating with Spring
public interface CloseAccountMapper {

    CloseAccountMapper INSTANCE = Mappers.getMapper(CloseAccountMapper.class);

    @Mapping(source = "civility", target = "civilite")
    @Mapping(source = "firstName", target = "prenom")
    @Mapping(source = "lastName", target = "nom")
    @Mapping(source = "clientId", target = "numPersonne")
    @Mapping(source = "email", target = "email")
    @Mapping(source = "object", target = "object")
    @Mapping(source = "message", target = "message")
    @Mapping(source = "accountId", target = "numCompte")
    @Mapping(target = "idFormulaire", constant = "PRIVE_CLIENT") // Static value
    CloseAccount toCloseAccount(CloseAccountRequest request);
}
-------
public class Main {
    public static void main(String[] args) {
        CloseAccountMapper mapper = CloseAccountMapper.INSTANCE;

        // Create CloseAccountRequest object
        CloseAccountRequest request = CloseAccountRequest.builder()
            .civility("Mr.")
            .firstName("John")
            .lastName("Doe")
            .clientId("12345")
            .email("john.doe@example.com")
            .object("Account Closure")
            .message("Please close my account.")
            .accountId("67890")
            .build();

        // Map to CloseAccount
        CloseAccount closeAccount = mapper.toCloseAccount(request);

        // Print the mapped CloseAccount object
        System.out.println(closeAccount);
    }
}
‐------------
import org.w3c.dom.Document;
import org.w3c.dom.Element;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import java.io.StringWriter;
import java.lang.reflect.Field;
import java.lang.reflect.InvocationTargetException;

public class FlatXMLAdapterWithFieldTransformation implements XMLAdapter {

    @Override
    public String convertToXML(Object object) {
        if (object == null) {
            throw new IllegalArgumentException("Object cannot be null");
        }

        try {
            Document document = createDocument();
            processFields(document, object);
            return documentToString(document);
        } catch (Exception e) {
            throw new RuntimeException("Error generating flat XML with field transformation", e);
        }
    }

    private Document createDocument() throws ParserConfigurationException {
        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
        DocumentBuilder builder = factory.newDocumentBuilder();
        return builder.newDocument();
    }

    private void processFields(Document document, Object object) throws IllegalAccessException {
        Field[] fields = object.getClass().getDeclaredFields();
        for (Field field : fields) {
            field.setAccessible(true);
            String fieldName = field.getName();
            Object fieldValue = field.get(object);
            String transformedName = toSnakeCase(fieldName);

            Element fieldElement = document.createElement(transformedName);
            fieldElement.appendChild(document.createTextNode(fieldValue != null ? fieldValue.toString() : "null"));
            document.appendChild(fieldElement);
        }
    }

    private String documentToString(Document document) throws TransformerException {
        Transformer transformer = TransformerFactory.newInstance().newTransformer();
        DOMSource source = new DOMSource(document);
        StringWriter writer = new StringWriter();
        StreamResult result = new StreamResult(writer);
        transformer.transform(source, result);
        return writer.toString();
    }

private String toSnakeCase(String fieldName) {
        StringBuilder result = new StringBuilder();
        for (char c : fieldName.toCharArray()) {
            if (Character.isUpperCase(c)) {
                result.append("_").append(c);
            } else {
                result.append(Character.toUpperCase(c));
            }
        }
        return result.toString();
    }
}

----------
public interface XMLAdapter {
    String convertToXML(Object object);
}

‐------------
unit tests

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.boot.test.context.SpringBootTest;

import static org.junit.jupiter.api.Assertions.*;

@SpringBootTest
class FlatXMLAdapterWithFieldTransformationTest {

    private FlatXMLAdapterWithFieldTransformation adapter;

    @BeforeEach
    void setUp() {
        adapter = new FlatXMLAdapterWithFieldTransformation();
    }

    @Test
    void testConvertToXML_NullObject_ThrowsIllegalArgumentException() {
        assertThrows(IllegalArgumentException.class, () -> {
            adapter.convertToXML(null);
        });
    }

    @Test
    void testConvertToXML_ValidObject_ReturnsCorrectXML() {
        // Arrange
        TestObject testObject = new TestObject("John", 30, "Developer");

        // Act
        String xml = adapter.convertToXML(testObject);

        // Assert
        String expectedXml = "<FIRST_NAME>John</FIRST_NAME><AGE>30</AGE><JOB_TITLE>Developer</JOB_TITLE>";
        assertTrue(xml.contains(expectedXml));
    }

    @Test
    void testConvertToXML_ObjectWithNullFields_ReturnsCorrectXML() {
        // Arrange
        TestObject testObject = new TestObject(null, 0, null);

        // Act
        String xml = adapter.convertToXML(testObject);

        // Assert
        String expectedXml = "<FIRST_NAME>null</FIRST_NAME><AGE>0</AGE><JOB_TITLE>null</JOB_TITLE>";
        assertTrue(xml.contains(expectedXml));
    }

    // Helper class for testing
    private static class TestObject {
        private String firstName;
        private int age;
        private String jobTitle;

        public TestObject(String firstName, int age, String jobTitle) {
            this.firstName = firstName;
            this.age = age;
            this.jobTitle = jobTitle;
        }

        public String getFirstName() {
            return firstName;
        }

        public int getAge() {
            return age;
        }

        public String getJobTitle() {
            return jobTitle;
        }
    }
}






    
