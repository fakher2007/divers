 import java.lang.annotation.ElementType;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;

@Retention(RetentionPolicy.RUNTIME)
@Target(ElementType.TYPE)
public @interface CompanyService {
    String companyName();
}

@CompanyService(companyName = "companyA")
@Service("serviceA1")
public class ServiceA1Impl implements ServiceA {
    @Override
    public void performActionA() {
        // Implementation for Service A1
    }
}

@CompanyService(companyName = "companyA")
@Service("serviceA2")
public class ServiceA2Impl implements ServiceA {
    @Override
    public void performActionA() {
        // Implementation for Service A2
    }
}

@CompanyService(companyName = "companyB")
@Service("serviceB1")
public class ServiceB1Impl implements ServiceB {
    @Override
    public void performActionB() {
        // Implementation for Service B1
    }
}

@CompanyService(companyName = "companyC")
@Service("serviceC1")
public class ServiceC1Impl implements ServiceC {
    @Override
    public void performActionC() {
        // Implementation for Service C1
    }
}


import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.ApplicationContext;
import org.springframework.stereotype.Component;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

@Component
public class ServiceFactory {

    private final ApplicationContext applicationContext;
    private final Map<String, List<Object>> companyServiceMap;

    @Autowired
    public ServiceFactory(ApplicationContext applicationContext) {
        this.applicationContext = applicationContext;
        this.companyServiceMap = new HashMap<>();
        initializeCompanyServiceMap();
    }

    private void initializeCompanyServiceMap() {
        Map<String, Object> serviceBeans = applicationContext.getBeansWithAnnotation(CompanyService.class);

        for (Object serviceBean : serviceBeans.values()) {
            CompanyService companyServiceAnnotation = serviceBean.getClass().getAnnotation(CompanyService.class);
            String companyName = companyServiceAnnotation.companyName();

            companyServiceMap.computeIfAbsent(companyName, k -> new ArrayList<>()).add(serviceBean);
        }
    }

    public <T> T getService(String companyCode, Class<T> serviceType) {
        List<Object> services = companyServiceMap.get(companyCode);
        if (services == null || services.isEmpty()) {
            throw new IllegalArgumentException("No services found for company code: " + companyCode);
        }

        List<T> matchingServices = services.stream()
                .filter(serviceType::isInstance)
                .map(serviceType::cast)
                .collect(Collectors.toList());

        if (matchingServices.isEmpty()) {
            throw new IllegalArgumentException("No service of type " + serviceType.getName() + " found for company code: " + companyCode);
        }

        if (matchingServices.size() > 1) {
            throw new IllegalArgumentException("Multiple services of type " + serviceType.getName() + " found for company code: " + companyCode);
        }

        return matchingServices.get(0);
    }
}
import org.springframework.stereotype.Component;
import org.springframework.web.filter.OncePerRequestFilter;

import javax.servlet.FilterChain;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;

@Component
public class TokenFilter extends OncePerRequestFilter {

    @Override
    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)
            throws ServletException, IOException {
        String token = extractToken(request);
        if (token != null) {
            String companyCode = extractCompanyCodeFromToken(token);
            request.setAttribute("companyCode", companyCode);
        }
        filterChain.doFilter(request, response);
    }

    private String extractToken(HttpServletRequest request) {
        // Implement your logic to extract the token from the request
        // For example, from the Authorization header
        String authHeader = request.getHeader("Authorization");
        if (authHeader != null && authHeader.startsWith("Bearer ")) {
            return authHeader.substring(7);
        }
        return null;
    }

    private String extractCompanyCodeFromToken(String token) {
        // Implement your logic to extract the company code from the token
        // This is just a placeholder implementation
        return "companyA"; // Replace with actual token parsing logic
    }
}

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RestController;

import javax.servlet.http.HttpServletRequest;

@RestController
public class MyController {

    private final ServiceFactory serviceFactory;

    @Autowired
    public MyController(ServiceFactory serviceFactory) {
        this.serviceFactory = serviceFactory;
    }

    @GetMapping("/performActionA")
    public String performActionA(HttpServletRequest request) {
        String companyCode = (String) request.getAttribute("companyCode");
        ServiceA serviceA = serviceFactory.getService(companyCode, ServiceA.class);
        serviceA.performActionA();
        return "Action A performed for company: " + companyCode;
    }

    @GetMapping("/performActionB")
    public String performActionB(HttpServletRequest request) {
        String companyCode = (String) request.getAttribute("companyCode");
        ServiceB serviceB = serviceFactory.getService(companyCode, ServiceB.class);
        serviceB.performActionB();
        return "Action B performed for company: " + companyCode;
    }

    @GetMapping("/performActionC")
    public String performActionC(HttpServletRequest request) {
        String companyCode = (String) request.getAttribute("companyCode");
        ServiceC serviceC = serviceFactory.getService(companyCode, ServiceC.class);
        serviceC.performActionC();
        return "Action C performed for company: " + companyCode;
    }
}

‚Äê----------
tests
----------
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;

import java.util.Collections;
import java.util.List;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

@ExtendWith(MockitoExtension.class)
public class DocumentResourceTest {

    @Mock
    private ServiceFactory serviceFactory;

    @Mock
    private DocumentsService documentsService;

    @InjectMocks
    private DocumentResource documentResource;

    @BeforeEach
    public void setUp() {
        // Mock the service factory to return the documents service
        when(serviceFactory.getService(anyString(), eq(DocumentsService.class))).thenReturn(documentsService);
    }

    @Test
    public void testGetDocuments_Success() throws ApiStatusException {
        // Arrange
        var gedResponse = new GedResponse();
        var document = new Document();
        gedResponse.setDocuments(Collections.singletonList(document));

        when(documentsService.searchle(anyString(), anyString(), anyString(), eq(Boolean.TRUE))).thenReturn(gedResponse);

        // Act
        List<MyConsultCopartisDocuments> result = documentResource.getDocuments("someToken");

        // Assert
        assertNotNull(result);
        assertEquals(1, result.size());
        assertEquals(MyConsultCopartisDocuments.class, result.get(0).getClass());
    }

    @Test
    public void testGetDocuments_NoDocumentsFound() throws ApiStatusException {
        // Arrange
        when(documentsService.searchle(anyString(), anyString(), anyString(), eq(Boolean.TRUE))).thenReturn(null);

        // Act
        List<MyConsultCopartisDocuments> result = documentResource.getDocuments("someToken");

        // Assert
        assertNotNull(result);
        assertTrue(result.isEmpty());
    }

    @Test
    public void testGetDocuments_ExceptionThrown() throws ApiStatusException {
        // Arrange
        when(documentsService.searchle(anyString(), anyString(), anyString(), eq(Boolean.TRUE))).thenThrow(new ApiStatusException("Error"));

        // Act & Assert
        assertThrows(ApiStatusException.class, () -> {
            documentResource.getDocuments("someToken");
        });
    }
}
-------
test
-------
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.context.ApplicationContext;

@ExtendWith(MockitoExtension.class)
public class ServiceFactoryTest {

    @Mock
    private ApplicationContext applicationContext;

    @InjectMocks
    private ServiceFactory serviceFactory;

    @BeforeEach
    public void setUp() {
        // Mock the application context to return specific beans
        Map<String, Object> serviceBeans = new HashMap<>();
        serviceBeans.put("service1", new MockService1());
        serviceBeans.put("service2", new MockService2());

        when(applicationContext.getBeansWithAnnotation(CompanyService.class)).thenReturn(serviceBeans);

        // Initialize the service factory
        serviceFactory.initializeCompanyServiceMap();
    }

    @Test
    public void testGetService_Success() {
        // Arrange
        String companyCode = "CompanyA";
        Class<MockService1> serviceType = MockService1.class;

        // Act
        MockService1 service = serviceFactory.getService(companyCode, serviceType);

        // Assert
        assertNotNull(service);
        assertEquals(MockService1.class, service.getClass());
    }

    @Test
    public void testGetService_NoServicesFound() {
        // Arrange
        String companyCode = "NonExistentCompany";
        Class<MockService1> serviceType = MockService1.class;

        // Act & Assert
        IllegalArgumentException exception = assertThrows(IllegalArgumentException.class, () -> {
            serviceFactory.getService(companyCode, serviceType);
        });

        assertEquals("No services found for company code: " + companyCode, exception.getMessage());
    }

    @Test
    public void testGetService_NoMatchingServiceType() {
        // Arrange
        String companyCode = "CompanyA";
        Class<NonExistentService> serviceType = NonExistentService.class;

        // Act & Assert
        IllegalArgumentException exception = assertThrows(IllegalArgumentException.class, () -> {
            serviceFactory.getService(companyCode, serviceType);
        });

        assertEquals("No service of type " + serviceType.getName() + " found for company code: " + companyCode, exception.getMessage());
    }

    @Test
    public void testGetService_MultipleMatchingServices() {
        // Arrange
        String companyCode = "CompanyA";
        Class<MockService1> serviceType = MockService1.class;

        // Add another service of the same type to the map
        serviceFactory.getCompanyServiceMap().get(companyCode).add(new MockService1());

        // Act & Assert
        IllegalArgumentException exception = assertThrows(IllegalArgumentException.class, () -> {
            serviceFactory.getService(companyCode, serviceType);
        });

        assertEquals("Multiple services of type " + serviceType.getName() + " found for company code: " + companyCode, exception.getMessage());
    }

    // Mock service classes with CompanyService annotation
    @CompanyService(companyName = "CompanyA")
    private static class MockService1 {
    }

-‚Äê-------
test
--------
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.context.ApplicationContext;

@ExtendWith(MockitoExtension.class)
public class ServiceFactoryTest {

    @Mock
    private ApplicationContext applicationContext;

    @InjectMocks
    private ServiceFactory serviceFactory;

    @BeforeEach
    public void setUp() {
        // Mock the application context to return specific beans
        Map<String, Object> serviceBeans = new HashMap<>();
        serviceBeans.put("service1", new MockService1());
        serviceBeans.put("service2", new MockService2());

        when(applicationContext.getBeansWithAnnotation(CompanyService.class)).thenReturn(serviceBeans);

        // Initialize the service factory
        serviceFactory.initializeCompanyServiceMap();
    }

    @Test
    public void testGetService_Success() {
        // Arrange
        String companyCode = "CompanyA";
        Class<MockService1> serviceType = MockService1.class;

        // Act
        MockService1 service = serviceFactory.getService(companyCode, serviceType);

        // Assert
        assertNotNull(service);
        assertEquals(MockService1.class, service.getClass());
    }

    @Test
    public void testGetService_NoServicesFound() {
        // Arrange
        String companyCode = "NonExistentCompany";
        Class<MockService1> serviceType = MockService1.class;

        // Act & Assert
        IllegalArgumentException exception = assertThrows(IllegalArgumentException.class, () -> {
            serviceFactory.getService(companyCode, serviceType);
        });

        assertEquals("No services found for company code: " + companyCode, exception.getMessage());
    }

    @Test
    public void testGetService_NoMatchingServiceType() {
        // Arrange
        String companyCode = "CompanyA";
        Class<NonExistentService> serviceType = NonExistentService.class;

        // Act & Assert
        IllegalArgumentException exception = assertThrows(IllegalArgumentException.class, () -> {
            serviceFactory.getService(companyCode, serviceType);
        });

        assertEquals("No service of type " + serviceType.getName() + " found for company code: " + companyCode, exception.getMessage());
    }

    @Test
    public void testGetService_MultipleMatchingServices() {
        // Arrange
        String companyCode = "CompanyA";
        Class<MockService1> serviceType = MockService1.class;

        // Add another service of the same type to the map
        serviceFactory.getCompanyServiceMap().get(companyCode).add(new MockService1());

        // Act & Assert
        IllegalArgumentException exception = assertThrows(IllegalArgumentException.class, () -> {
            serviceFactory.getService(companyCode, serviceType);
        });

        assertEquals("Multiple services of type " + serviceType.getName() + " found for company code: " + companyCode, exception.getMessage());
    }

    // Mock service classes with CompanyService annotation
    @CompanyService(companyName = "CompanyA")
    private static class MockService1 {
    }

    @CompanyService(companyName = "CompanyB")
    private static class MockService2 {
    }

    private static class NonExistentService {
    }
}

------
test
------
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.*;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.http.HttpMethod;
import org.springframework.http.ResponseEntity;

import javax.servlet.http.HttpServletRequest;
import java.util.List;

@ExtendWith(MockitoExtension.class)
public class DefaultDocumentServiceTest {

    @Mock
    private AsterionDocsService asterionDocsService;

    @Mock
    private HttpServletRequest request;

    @Mock
    private TokenProvider tokenProvider;

    @Mock
    private GatewayFeignClient gatewayFeignClient;

    @Mock
    private CommonHelper commonHelper;

    @InjectMocks
    private DefaultDocumentService defaultDocumentService;

    @BeforeEach
    public void setUp() {
        // Initialize any necessary setup here
    }

    @Test
    public void testSearchFile() throws ApiStatusException {
        // Arrange
        String libelleug3 = "testLibelle";
        String userRole = "testRole";
        String companyCode = "testCompany";
        boolean onlyWithCategories = true;

        Account[] accounts = new Account[]{new Account(), new Account()};
        ResponseEntity<Object> responseEntity = ResponseEntity.ok(accounts);

        when(commonHelper.calcRequestBuilder(any(HttpMethod.class), eq(MaUrl.ACCOUNTS), eq(null), eq("true"))).thenReturn(responseEntity);

        // Act
        GedResponse result = defaultDocumentService.searchFile(libelleug3, userRole, companyCode, onlyWithCategories);

        // Assert
        // Add assertions based on the expected behavior of the searchFile method
        // For example, you might want to verify that the result is as expected
        // assertEquals(expectedGedResponse, result);
    }

    @Test
    public void testSearchPche() throws ApiStatusException {
        // Arrange
        AsterionDocVn asterionDocVn = new AsterionDocVn();
        String companyCode = "testCompany";
        boolean onlyWithCategories = true;

        GedResponse expectedResponse = new GedResponse();
        when(asterionDocsService.searchPcsMw(asterionDocVn, companyCode, onlyWithCategories)).thenReturn(expectedResponse);

        // Act
        GedResponse result = defaultDocumentService.searchPche(asterionDocVn, companyCode, onlyWithCategories);

        // Assert
        assertEquals(expectedResponse, result);
    }

    @Test
    public void testSearch() throws ApiStatusException {
        // Arrange
        String libelleug3 = "testLibelle";
        String companyCode = "testCompany";

        Account[] accounts = new Account[]{new Account(), new Account()};
        ResponseEntity<Object> responseEntity = ResponseEntity.ok(accounts);

        when(commonHelper.calcRequestBuilder(any(HttpMethod.class), eq(MaUrl.ACCOUNTS), eq(null), eq("true"))).thenReturn(responseEntity);

        List<MyConsultCopartisDocuments> expectedDocuments = List.of(new MyConsultCopartisDocuments(), new MyConsultCopartisDocuments());
        when(asterionDocsService.search(accounts, libelleug3, companyCode)).thenReturn(expectedDocuments);

        // Act
        List<MyConsultCopartisDocuments> result = defaultDocumentService.search(libelleug3, companyCode);

        // Assert
        assertEquals(expectedDocuments, result);
    }
}
-------
test
-------
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.*;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.http.ResponseEntity;

import javax.servlet.http.HttpServletRequest;
import java.time.LocalDate;
import java.util.List;

@ExtendWith(MockitoExtension.class)
public class DefaultDocumentServiceTest {

    @Mock
    private AsterionDocsService asterionDocsService;

    @Mock
    private HttpServletRequest request;

    @Mock
    private TokenProvider tokenProvider;

    @Mock
    private GatewayFeignClient gatewayFeignClient;

    @Mock
    private CommonHelper commonHelper;

    @InjectMocks
    private DefaultDocumentService defaultDocumentService;

    @BeforeEach
    public void setUp() {
        // Initialize any necessary setup here
    }

    @Test
    public void testSearchMw() throws ApiStatusException {
        // Arrange
        Account[] accountsEntity = new Account[]{new Account("12345"), new Account("67890")};
        String libelleUg3 = "testLibelle";
        String userRole = "testRole";
        String companyCode = "testCompany";
        boolean onlyWithCategories = true;

        GedResponse expectedResponse = new GedResponse();
        ResponseEntity<GedResponse> responseEntity = ResponseEntity.ok(expectedResponse);

        when(commonHelper.calcAndParse(eq(GedResponse.class), any(GedRequest.class), eq(new Object[]{onlyWithCategories}))).thenReturn(responseEntity);

        // Act
        GedResponse result = defaultDocumentService.searchMw(accountsEntity, libelleUg3, userRole, companyCode, onlyWithCategories);

        // Assert
        assertEquals(expectedResponse, result);
    }

    @Test
    public void testSearchMw_EmptyAccounts() throws ApiStatusException {
        // Arrange
        Account[] accountsEntity = new Account[]{};
        String libelleUg3 = "testLibelle";
        String userRole = "testRole";
        String companyCode = "testCompany";
        boolean onlyWithCategories = true;

        GedResponse expectedResponse = new GedResponse();
        ResponseEntity<GedResponse> responseEntity = ResponseEntity.ok(expectedResponse);

        when(commonHelper.calcAndParse(eq(GedResponse.class), any(GedRequest.class), eq(new Object[]{onlyWithCategories}))).thenReturn(responseEntity);

        // Act
        GedResponse result = defaultDocumentService.searchMw(accountsEntity, libelleUg3, userRole, companyCode, onlyWithCategories);

        // Assert
        assertEquals(expectedResponse, result);
    }

    @Test
    public void testSearchMw_NullAccounts() throws ApiStatusException {
        // Arrange
        Account[] accountsEntity = null;
        String libelleUg3 = "testLibelle";
        String userRole = "testRole";
        String companyCode = "testCompany";
        boolean onlyWithCategories = true;

        GedResponse expectedResponse = new GedResponse();
        ResponseEntity<GedResponse> responseEntity = ResponseEntity.ok(expectedResponse);

        when(commonHelper.calcAndParse(eq(GedResponse.class), any(GedRequest.class), eq(new Object[]{onlyWithCategories}))).thenReturn(responseEntity);

        // Act
        GedResponse result = defaultDocumentService.searchMw(accountsEntity, libelleUg3, userRole, companyCode, onlyWithCategories);

        // Assert
        assertEquals(expectedResponse, result);
    }

    @Test
    public void testSearchMw_WithCategories() throws ApiStatusException {
        // Arrange
        Account[] accountsEntity = new Account[]{new Account("12345"), new Account("67890")};
        String libelleUg3 = "testLibelle";
        String userRole = "testRole";
        String companyCode = "testCompany";
        boolean onlyWithCategories = true;

        GedResponse expectedResponse = new GedResponse();
        ResponseEntity<GedResponse> responseEntity = ResponseEntity.ok(expectedResponse);

        when(commonHelper.calcAndParse(eq(GedResponse.class), any(GedRequest.class), eq(new Object[]{onlyWithCategories}))).thenReturn(responseEntity);

        // Act
        GedResponse result = defaultDocumentService.searchMw(accountsEntity, libelleUg3, userRole, companyCode, onlyWithCategories);

        // Assert
        assertEquals(expectedResponse, result);
    }

    @Test
    public void testSearchMw_WithoutCategories() throws ApiStatusException {
        // Arrange
        Account[] accountsEntity = new Account[]{new Account("12345"), new Account("67890")};
        String libelleUg3 = "testLibelle";
        String userRole = "testRole";
        String companyCode = "testCompany";
        boolean onlyWithCategories = false;

        GedResponse expectedResponse = new GedResponse();
        ResponseEntity<GedResponse> responseEntity = ResponseEntity.ok(expectedResponse);

        when(commonHelper.calcAndParse(eq(GedResponse.class), any(GedRequest.class), eq(new Object[]{onlyWithCategories}))).thenReturn(responseEntity);

        // Act
        GedResponse result = defaultDocumentService.searchMw(accountsEntity, libelleUg3, userRole, companyCode, onlyWithCategories);

        // Assert
        assertEquals(expectedResponse, result);
    }
}


    @CompanyService(companyName = "CompanyB")
    private static class MockService2 {
    }

    private static class NonExistentService {
    }
}




