import io.jsonwebtoken.Claims;
import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.SignatureAlgorithm;
import io.jsonwebtoken.security.Keys;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.Arguments;
import org.junit.jupiter.params.provider.MethodSource;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.boot.test.context.SpringBootTest;

import javax.crypto.SecretKey;
import java.util.Optional;
import java.util.stream.Stream;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.*;

@SpringBootTest
class TokenProviderTest {

    @Mock
    private SecretKey secretKey;

    @InjectMocks
    private TokenProvider tokenProvider;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
        // Initialize the secretKey with a valid key for HS512
        secretKey = Keys.secretKeyFor(SignatureAlgorithm.HS512);
    }

    @Test
    void testGetValueFromToken_EmptyToken() {
        Optional<String> result = tokenProvider.getValueFromToken("", "key", false);
        assertEquals(Optional.empty(), result);
    }

    @ParameterizedTest
    @MethodSource("provideArgumentsForGetValueFromToken")
    void testGetValueFromToken(String token, String key, boolean sso, String expectedValue) {
        // Mock the getClaims method
        when(tokenProvider.getClaims(token, "sid")).thenReturn("SSO");
        when(tokenProvider.getClaims(token, key)).thenReturn(expectedValue);

        Optional<String> result = tokenProvider.getValueFromToken(token, key, sso);

        assertEquals(Optional.of(expectedValue), result);
    }

    private static Stream<Arguments> provideArgumentsForGetValueFromToken() {
        return Stream.of(
            Arguments.of("validToken", "key", false, "value"),
            Arguments.of("validToken", "key", true, "value")
        );
    }

    @Test
    void testGetValueFromToken_SSO_InvalidSid() {
        String token = "validToken";
        String key = "key";
        boolean sso = true;

        // Mock the getClaims method to return an invalid sid
        when(tokenProvider.getClaims(token, "sid")).thenReturn("INVALID");

        Optional<String> result = tokenProvider.getValueFromToken(token, key, sso);

        assertEquals(Optional.empty(), result);
    }

    @Test
    void testGetValueFromToken_SSO_EmptySid() {
        String token = "validToken";
        String key = "key";
        boolean sso = true;

        // Mock the getClaims method to return an empty sid
        when(tokenProvider.getClaims(token, "sid")).thenReturn("");

        Optional<String> result = tokenProvider.getValueFromToken(token, key, sso);

        assertEquals(Optional.empty(), result);
    }

    // Mock implementation of getClaims method
    public String getClaims(String token, String key) {
        Claims claims = Jwts.parserBuilder()
                .setSigningKey(secretKey)
                .build()
                .parseClaimsJws(token)
                .getBody();

        return claims.get(key).toString();
    }
}
