import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.web.reactive.function.client.ExchangeFilterFunction;
import org.springframework.web.reactive.function.client.WebClient;
import reactor.core.publisher.Mono;

public class MyService {

    private static final Logger logger = LoggerFactory.getLogger(MyService.class);

    private final WebClient webClient;

    public MyService(WebClient.Builder webClientBuilder) {
        this.webClient = webClientBuilder
                .filters(filters -> filters.add(logRequest())
                                          .add(logResponse())
                                          .add(logError()))
                .build();
    }

    public Mono<String> fetchResponse() {
        return webClient.get()
                .uri("https://example.com/api/resource")
                .retrieve()
                .bodyToMono(String.class)
                .doOnSuccess(response -> logger.info("Response: {}", response));
    }

    private ExchangeFilterFunction logRequest() {
        return ExchangeFilterFunction.ofRequestProcessor(clientRequest -> {
            logger.info("Request: {} {}", clientRequest.method(), clientRequest.url());
            clientRequest.headers().forEach((name, values) -> values.forEach(value -> logger.info("{}={}", name, value)));
            return Mono.just(clientRequest);
        });
    }

    private ExchangeFilterFunction logResponse() {
        return ExchangeFilterFunction.ofResponseProcessor(clientResponse -> {
            logger.info("Response status: {}", clientResponse.statusCode());
            return Mono.just(clientResponse);
        });
    }

    private ExchangeFilterFunction logError() {
        return ExchangeFilterFunction.ofErrorProcessor(throwable -> {
            logger.error("Error occurred: {}", throwable.getMessage());
            return Mono.error(throwable);
        });
    }
}
----‐-------------‐--‐-
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.web.reactive.function.BodyExtractors;
import org.springframework.web.reactive.function.client.ExchangeFilterFunction;
import org.springframework.web.reactive.function.client.WebClient;
import reactor.core.publisher.Mono;

public class MyService {

    private static final Logger logger = LoggerFactory.getLogger(MyService.class);

    private final WebClient webClient;

    public MyService(WebClient.Builder webClientBuilder) {
        this.webClient = webClientBuilder
                .filters(filters -> filters.add(logRequest())
                                          .add(logResponse())
                                          .add(logError()))
                .build();
    }

    public Mono<String> fetchResponse() {
        return webClient.get()
                .uri("https://example.com/api/resource")
                .retrieve()
                .bodyToMono(String.class)
                .doOnSuccess(response -> logger.info("Response body: {}", response));
    }

    private ExchangeFilterFunction logRequest() {
        return ExchangeFilterFunction.ofRequestProcessor(clientRequest -> {
            logger.info("Request: {} {}", clientRequest.method(), clientRequest.url());
            clientRequest.headers().forEach((name, values) -> values.forEach(value -> logger.info("{}={}", name, value)));
            return Mono.just(clientRequest);
        });
    }

    private ExchangeFilterFunction logResponse() {
        return ExchangeFilterFunction.ofResponseProcessor(clientResponse -> {
            logger.info("Response status: {}", clientResponse.statusCode());
            return clientResponse.bodyToMono(String.class)
                    .flatMap(responseBody -> {
                        logger.info("Response body: {}", responseBody);
                        return Mono.just(clientResponse);
                    });
        });
    }

    private ExchangeFilterFunction logError() {
        return ExchangeFilterFunction.ofErrorProcessor(throwable -> {
            logger.error("Error occurred: {}", throwable.getMessage());
            return Mono.error(throwable);
        });
    }
}

