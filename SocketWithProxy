import java.net.InetSocketAddress;
import java.net.Proxy;
import java.net.Socket;

public class WebServerChecker {
    public static void main(String[] args) {
        String host = "your_web_server_address";
        int port = 80; // HTTP port
        
        String proxyHost = "proxy_host_address";
        int proxyPort = 8080; // Proxy port
        
        try {
            Proxy proxy = new Proxy(Proxy.Type.HTTP, new InetSocketAddress(proxyHost, proxyPort));
            Socket socket = new Socket(proxy);
            socket.connect(new InetSocketAddress(host, port));
            System.out.println("Web server is running!");
            socket.close();
        } catch (Exception e) {
            System.out.println("Web server is not running or there's an issue.");
            e.printStackTrace();
        }
    }
}
‐----‐-------------
import java.net.InetSocketAddress;
import java.net.Proxy;
import java.net.Socket;
import java.util.ArrayList;
import java.util.List;

public class WebServerChecker {
    public static void main(String[] args) {
        String host = "your_web_server_address";
        int port = 80; // HTTP port
        
        List<ProxyConfig> proxies = new ArrayList<>();
        proxies.add(new ProxyConfig("proxy1_host", 8080));
        proxies.add(new ProxyConfig("proxy2_host", 8081));
        // Add more proxies as needed
        
        for (ProxyConfig proxyConfig : proxies) {
            try {
                Proxy proxy = new Proxy(Proxy.Type.HTTP, new InetSocketAddress(proxyConfig.getHost(), proxyConfig.getPort()));
                Socket socket = new Socket(proxy);
                socket.connect(new InetSocketAddress(host, port), 5000); // 5 seconds timeout
                System.out.println("Web server is running through proxy: " + proxyConfig.getHost());
                socket.close();
            } catch (Exception e) {
                System.out.println("Failed to connect through proxy: " + proxyConfig.getHost());
                e.printStackTrace();
            }
        }
    }
}

class ProxyConfig {
    private String host;
    private int port;

    public ProxyConfig(String host, int port) {
        this.host = host;
        this.port = port;
    }

    public String getHost() {
        return host;
    }

    public int getPort() {
        return port;
    }
}
‐-------------------------
import java.net.Authenticator;
import java.net.InetSocketAddress;
import java.net.PasswordAuthentication;
import java.net.Proxy;
import java.net.Socket;
import java.util.ArrayList;
import java.util.List;

public class WebServerChecker {
    public static void main(String[] args) {
        String host = "your_web_server_address";
        int port = 80; // HTTP port
        
        String proxyUsername = "your_proxy_username";
        String proxyPassword = "your_proxy_password";
        
        List<ProxyConfig> proxies = new ArrayList<>();
        proxies.add(new ProxyConfig("proxy1_host", 8080));
        proxies.add(new ProxyConfig("proxy2_host", 8081));
        // Add more proxies as needed
        
        // Set up Authenticator for proxy authentication
        Authenticator.setDefault(new Authenticator() {
            protected PasswordAuthentication getPasswordAuthentication() {
                return new PasswordAuthentication(proxyUsername, proxyPassword.toCharArray());
            }
        });
        
        for (ProxyConfig proxyConfig : proxies) {
            try {
                Proxy proxy = new Proxy(Proxy.Type.HTTP, new InetSocketAddress(proxyConfig.getHost(), proxyConfig.getPort()));
                Socket socket = new Socket(proxy);
                socket.connect(new InetSocketAddress(host, port), 5000); // 5 seconds timeout
                System.out.println("Web server is running through proxy: " + proxyConfig.getHost());
                socket.close();
            } catch (Exception e) {
                System.out.println("Failed to connect through proxy: " + proxyConfig.getHost());
                e.printStackTrace();
            }
        }
    }
}

class ProxyConfig {
    private String host;
    private int port;

    public ProxyConfig(String host, int port) {
        this.host = host;
        this.port = port;
    }

    public String getHost() {
        return host;
    }

    public int getPort() {
        return port;
    }
}
--------,,,,,,,,,
import java.net.Authenticator;
import java.net.InetSocketAddress;
import java.net.PasswordAuthentication;
import java.net.Proxy;
import java.net.Socket;
import java.util.ArrayList;
import java.util.List;

public class WebServerChecker {
    public static void main(String[] args) {
        String host = "your_web_server_address";
        int port = 80; // HTTP port
        
        String proxyUsername = "your_proxy_username";
        String proxyPassword = "your_proxy_password";
        
        List<ProxyConfig> proxies = new ArrayList<>();
        proxies.add(new ProxyConfig("proxy1_host", 8080));
        proxies.add(new ProxyConfig("proxy2_host", 8081));
        // Add more proxies as needed
        
        for (ProxyConfig proxyConfig : proxies) {
            try {
                Proxy proxy = new Proxy(Proxy.Type.HTTP, new InetSocketAddress(proxyConfig.getHost(), proxyConfig.getPort()));
                
                // Set Authenticator on the Proxy instance
                Authenticator proxyAuthenticator = new Authenticator() {
                    protected PasswordAuthentication getPasswordAuthentication() {
                        return new PasswordAuthentication(proxyUsername, proxyPassword.toCharArray());
                    }
                };
                Authenticator.setDefault(proxyAuthenticator);
                
                Socket socket = new Socket(proxy);
                socket.connect(new InetSocketAddress(host, port), 5000); // 5 seconds timeout
                System.out.println("Web server is running through proxy: " + proxyConfig.getHost());
                socket.close();
            } catch (Exception e) {
                System.out.println("Failed to connect through proxy: " + proxyConfig.getHost());
                e.printStackTrace();
            }
        }
    }
}

class ProxyConfig {
    private String host;
    private int port;

    public ProxyConfig(String host, int port) {
        this.host = host;
        this.port = port;
    }

    public String getHost() {
        return host;
    }

    public int getPort() {
        return port;
    }
}
--------------
unit tests
--------------
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import java.io.IOException;
import java.net.*;
import java.util.Arrays;
import java.util.Collections;

public class ServerCheckerTest {

    @InjectMocks
    private ServerChecker serverChecker;

    @Mock
    private ProxyProps proxyProps;

    @BeforeEach
    public void setup() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    public void testIsServerUpWithValidHostAndPort() throws IOException {
        assertTrue(serverChecker.isServerUp("google.com", 80));
    }

    @Test
    public void testIsServerUpWithInvalidHostAndPort() {
        assertFalse(serverChecker.isServerUp("invalidhost", 80));
    }

    @Test
    public void testIsServerUpWithLocalhostAndProxy() {
        when(proxyProps.isUse()).thenReturn(true);
        when(proxyProps.getInstances()).thenReturn(Collections.singletonList(
                new ProxyProps.ProxyInstance("proxyHost", 8080)
        ));
        assertTrue(serverChecker.isServerUp("localhost", 80));
    }

    @Test
    public void testCreateSocket() throws IOException {
        Socket socket = serverChecker.createSocket("google.com", 80);
        assertNotNull(socket);
    }

    @Test
    public void testConnectViaProxy() throws Exception {
        ProxyProps.ProxyInstance proxyInstance = new ProxyProps.ProxyInstance("proxyHost", 8080);
        when(proxyProps.getInstances()).thenReturn(Collections.singletonList(proxyInstance));

        assertTrue(serverChecker.connectViaProxy("google.com", 80));
    }

    @Test
    public void testConnectViaProxyWithException() throws Exception {
        when(proxyProps.getInstances()).thenReturn(Collections.singletonList(
                new ProxyProps.ProxyInstance("proxyHost", 8080)
        ));

        assertFalse(serverChecker.connectViaProxy("invalidHost", 80));
    }
}


